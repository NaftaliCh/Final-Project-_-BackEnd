generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bookings      Booking[]
  payments      Payment[]
  notifications Notification[]
}

model Field {
  id        Int       @id @default(autoincrement())
  name      String
  location  String
  schedules Schedule[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  fieldId   Int
  startTime DateTime
  endTime   DateTime
  available Boolean   @default(true)
  bookings  Booking[] @relation("ScheduleBookings")

  Field     Field     @relation(fields: [fieldId], references: [id])
}

model Booking {
  id         Int       @id @default(autoincrement())
  userId     Int
  scheduleId Int
  status     String    @default("booked") // Values can be "booked", "cancelled"
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  User       User      @relation(fields: [userId], references: [id])
  Schedule   Schedule  @relation(name: "ScheduleBookings", fields: [scheduleId], references: [id])
  payments   Payment[]
}

model Payment {
  id         Int      @id @default(autoincrement())
  userId     Int
  bookingId  Int
  amount     Float
  status     String   // Values can be "pending", "completed", "failed"
  createdAt  DateTime @default(now())

  User       User     @relation(fields: [userId], references: [id])
  Booking    Booking  @relation(fields: [bookingId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  User      User     @relation(fields: [userId], references: [id])
}
